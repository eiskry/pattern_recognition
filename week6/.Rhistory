plot(k,x)
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k
plot(k,x)
k_list
plot(k_list,x)
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k_list
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k_list
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=19,prob=TRUE)
table(cl,knn3)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=1,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=3,prob=TRUE)
knn3<-knn(train,test,cl,k=3,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=5,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=7,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=9,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=11,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=13,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=14,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=15,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=17,prob=TRUE)
(sum(cl!=knn3))/50
knn3<-knn(train,test,cl,k=19,prob=TRUE)
(sum(cl!=knn3))/50
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
knn3<-knn.cv(train,test,cl,k=19,prob=TRUE)
knn3<-knn.cv(train,cl,k=3,prob=TRUE)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn.cv(train,cl,k=3,prob=TRUE)
(sum(cl!=knn3))/50
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
k_list <- list()
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
k
k_list
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k_list
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=3,prob=TRUE)
a<-c(1:50)[attributes(knn3)$prob==0.5]
a
length(c(1:50)[cl[-a]!=knn3[-a]])
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
a<-c(1:50)[attributes(knn3)$prob==0.5]
a
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
a<-c(1:50)[attributes(knn3)$prob==0.5]
knn3<-knn(train,test,cl,k=3,prob=TRUE)
a<-c(1:50)[attributes(knn3)$prob==0.5]
a
length(c(1:50)[cl[-a]!=knn3[-a]])
table(cl,knn3)
(sum(cl!=knn3))/50
length(c(1:50)[cl[-a]!=knn3[-a]])/50
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=3,prob=TRUE)
a<-c(1:50)[attributes(knn3)$prob==0.5]
a
length(c(1:50)[cl[-a]!=knn3[-a]])
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
plot(k_list,x)
k_list
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k_list
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:10){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn(train,test,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
x <- list()
k_list <- list()
for (i in 1:25){
k <- 2*i -1
k_list <- c(k_list,list(2*i -1))
knn_k <- knn.cv(train,cl,k,prob=TRUE)
x <- c(x,list((sum(cl!=knn_k))/50 ))
}
x
k_list
plot(k_list,x)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=3,prob=TRUE)
table(cl,knn3)
table(cl,knn3)
(sum(cl!=knn3))/50
table(cl,knn3)
table(cl,knn3)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=3,prob=TRUE)
table(cl,knn3)
(sum(cl!=knn3))/50
table(cl,knn3)
table(cl,knn3)
table(cl,knn3)
table(cl,knn3)
table(cl,knn3)
library(MASS)
library(class)
data(iris3)
train<-rbind(iris3[1:25,,2],iris3[1:25,,3])
train <- scale(train)
test<-rbind(iris3[26:50,,2],iris3[26:50,,3])
test <- scale(test)
cl<-factor(c(rep("c",25),rep("v",25)))
knn3<-knn(train,test,cl,k=3,prob=TRUE)
a<-c(1:50)[attributes(knn3)$prob==0.5]
a
length(c(1:50)[cl[-a]!=knn3[-a]])
table(cl,knn3)
(sum(cl!=knn3))/50
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
source('~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week4/4_4.R', echo=TRUE)
setwd("~/university of Tsukuba/coins/B3/pattern_recognition/pattern_recognition/week6")
keras::install_keras()
source('~/.active-rstudio-document', echo=TRUE)
Y
library(MASS)
library(keras)
library(MASS)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
model <- keras_model_sequential()
model %>%
layer_dense( units = 8, activation = 'sigmoid', imput_shape = c(4)) %>%
layer_dense( units = 1, activation = 'sigmoid')
model %>%
layer_dense( units = 8, activation = 'sigmoid', input_shape = c(4)) %>%
layer_dense( units = 1, activation = 'sigmoid')
model %>% compile(
loss = `binary_crossentropy',
optimizer = optimizer_sgd(lr = 0.05),
metrics = c(`accuracy')
model %>% compile(
loss = `binary_crossentropy',
optimizer = optimizer_sgd(lr = 0.05),
matrics = c(`accuracy')
model %>%
compile(loss = `binary_crossentropy',
optimizer = optimizer_sgd(lr = 0.05),
metrics = c(`accuracy')
model %>%
compile(loss = `binary_crossentropy', optimizer = optimizer_sgd(lr = 0.05),metrics = c(`accuracy')
)
model %>%
compile(loss = `binary_crossentropy', optimizer = optimizer_sgd(lr = 0.05),metrics = c(`accuracy'))
model %>%
compile(loss = `binary_crossentropy', optimizer = optimizer_sgd(lr = 0.05),metrics = c(`accuracy'))
model %>%
compile(loss = 'binary_crossentropy',
optimizer = optimizer_sgd(lr = 0.05),
metrics = c('accuracy')
)
history <- model %>% fit(
train.data,
train.targets,
epochs = 500,
batch_size = 5,
validation_split = 0.2
)
score <- model %>% evaluate(test.data, test.targets, batch_size=128)
print(score)
classes <- model %>% predict_classes(test.data, batch_siz
classes <- model %>% predict_classes(test.data, batch_size = 128)
print(score)
classes <- model %>% predict_classes(test.data, batch_size = 128)
wgts <- get_weights(model)
wgts
layer_outputs <- lapply(model$layers, function(layer) layer$output)
model$layers
layer_outputs
activation_model <- keras_model(inputs = model$input outputs = layer_outputs)
activation_model <- keras_model(inputs = model$input, outputs = layer_outputs)
model$input
activation_model
test <- array_reshape(test.data[1, ], c(1,4))
activations <- activation_model %>% predict(test)
activations
first_layer_activation <- activation[[1]]
first_layer_activation <- activations[[1]]
barplot(first_layer_activation, names=1:8)
sv
vc
svc
nrow(svc)
test.data
test.targets
##################### パッケージインストール
library(keras)
library(MASS)
##################### データの準備
sv <- rbind(iris3[,,1], iris3[,,3]) # setosa+virginica
vc <- iris3[,,2] # versicolor
svcl <- c(rep(1,100)) # sv のクラスを1
sv <- cbind(sv,svcl)
vccl <- c(rep(0,50)) # vc のクラスを0
vc <- cbind(vc, vccl)
sv <- as.matrix(sv) # 行列に変換
vc <- as.matrix(vc)
colnames(sv) <- NULL # 列名を削除
colnames(vc) <- NULL
svc <- rbind(sv, vc)
ind <- sample(1:nrow(svc), nrow(svc)*2/3) # 全体の2/3を学習データに
train.data <- svc[ind, 1:4]
test.data <- svc[-ind, 1:4] # 残りの1/3をテストデータに
train.targets <- svc[ind, 5]
test.targets <- svc[-ind, 5]
######## モデルオブジェクトの準備
model <- keras_model_sequential()
######## model内部の構造の構築
model %>%
layer_dense( units = 8, activation = 'sigmoid', input_shape = c(4)) %>%
layer_dense( units = 1, activation = 'sigmoid')
######## modelのコンパイル
model %>%
compile(loss = 'binary_crossentropy',  # 2クラス問題→2値クロスエントロピー
optimizer = optimizer_sgd(lr = 0.05),
metrics = c('accuracy')
)
######## モデルの実行
history <- model %>% fit(
train.data,
train.targets,
epochs = 500,
batch_size = 5,
validation_split = 0.2
)
